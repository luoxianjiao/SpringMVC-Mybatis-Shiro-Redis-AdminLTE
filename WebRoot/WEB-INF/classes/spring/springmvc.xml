<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

		
	<!-- 对于注解的Handler可以单个配置
	实际开发中建议使用组件扫描
	 -->
	
	<!-- 可以扫描controller、service、...
	这里让扫描controller，指定controller的包
	 -->
	<!-- <context:component-scan base-package="cn.itcast.ssm.controller"></context:component-scan> -->
	
	<!-- 自动扫描(自动注入)，不扫描Service-->
	<context:component-scan base-package="cn.itcast.ssm">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>  		
	</context:component-scan>
	<!-- <import resource="classpath:activemq_config.xml"/> -->
	<!-- 扫描@Service -->
	<!-- <context:component-scan base-package="cn.itcast.ssm.service">
		  <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>  
	</context:component-scan> -->
	
	
	<!-- 处理器映射器 将bean的name作为url进行查找 ，需要在配置Handler时指定beanname（就是url） 
	所有的映射器都实现 HandlerMapping接口。
	-->
	<!-- <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" /> -->
		
	<!--简单url映射  -->
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				对itemsController1进行url映射，url是/queryItems1.action
				<prop key="/queryItems1.action">itemsController1</prop>
				<prop key="/queryItems2.action">itemsController2</prop>
				<prop key="/queryItems3.action">itemsController3</prop>
			</props>
		</property>
	</bean> -->
	
	<!--注解映射器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
	<!--注解适配器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->
	
	<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
	mvc:annotation-driven默认加载很多的参数绑定方法，
	比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
	实际开发时使用mvc:annotation-driven
	 -->
	<!-- <mvc:annotation-driven></mvc:annotation-driven> -->
	
	<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>
			
	<!-- 处理器适配器 所有处理器适配器都实现 HandlerAdapter接口 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" /> -->
	<!-- 另一个非注解的适配器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"/> -->

	<!-- 视图解析器
	解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包
	 -->
	<!-- <bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		配置jsp路径的前缀		
		<property name="prefix" value="/WEB-INF/jsp/"/>		
		配置jsp路径的后缀
		<property name="suffix" value=".jsp"/>
		<property name="order" value="1"></property>
	</bean> -->
	<bean name="api" class="cn.itcast.ssm.freemarker.tags.APITemplateModel"></bean>
	<bean name="springContextUtil" class="cn.itcast.ssm.utils.SpringContextUtil" scope="singleton"></bean>
	<!-- 视图解析器 -->
	<!-- 配置freeMarker视图解析器 -->
	<bean id="viewResolverFtl"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass" value="cn.itcast.ssm.freemarker.extend.FreeMarkerViewExtend" />
		<!-- 把Freemarker 扩展一下，把相关属性加入进去。。。 -->
		<property name="contentType" value="text/html; charset=utf-8" />
		<property name="cache" value="true" />
		<property name="suffix" value=".html" />
		<property name="order" value="0" />
	</bean>
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="order" value="2"></property>
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<!-- <property name="prefix" value="/WEB-INF/views/" /> -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp"></property>
	</bean>



	<!-- 配置freeMarker 拓展-->
	<bean id="freemarkerConfig"
		class="cn.itcast.ssm.freemarker.extend.FreeMarkerConfigExtend">
		<property name="templateLoaderPath">
			<value>/WEB-INF/ftl/</value>
		</property>
		<property name="freemarkerVariables">
			<map>
				<entry key="xml_escape" value-ref="fmXmlEscape" />
				<entry key="api" value-ref="api"/>
			</map>
		</property>
		<property name="defaultEncoding">
			<value>utf-8</value>
		</property>
		<property name="freemarkerSettings">
			<props><!-- 315360000 -->
					<prop key="template_update_delay">0</prop>
					<prop key="defaultEncoding">UTF-8</prop>
					<prop key="url_escaping_charset">UTF-8</prop>
					<prop key="locale">zh_CN</prop>
					<prop key="boolean_format">true,false</prop>
					<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
					<prop key="date_format">yyyy-MM-dd</prop>
					<prop key="time_format">HH:mm:ss</prop>
	<!--			<prop key="number_format">0.######</prop>-->
				<prop key="number_format">#</prop>
				<prop key="whitespace_stripping">true</prop>
				<!-- <prop key="auto_import">
					自动装载，引入Freemarker，用于Freemarker Macro引入
					/common/config/top.ftl as _top,
					/common/config/left.ftl as _left
				</prop> -->
			</props>
		</property>
	</bean>
	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>
	<!--===============通用视图解析器 end===============-->
	
	
	<!-- 自定义参数绑定 -->
	<bean
		id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<bean class="cn.itcast.ssm.controller.converter.CustomDateConverter"></bean>
				<bean class="cn.itcast.ssm.controller.converter.CustomSpaceConverter"></bean>
			</list>
		</property>
	</bean>
	<!-- 配置全局异常处理器 (只要实现了HandlerExceptionResolver接口就是 全局异常处理器)-->
	<bean class="cn.itcast.ssm.exception.CustomExceptionResolver"></bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件最大尺寸为5Mb -->
		<property name="maxUploadSize" value="5242880"></property>
	</bean>
	
	<!-- 若使用的RequestMappingHandlerAdapter注解适配器时，需要配置json转换器 -->
	
	<!-- 配置拦截器--> 
	<!-- <mvc:interceptors>
		若配多个，则按顺序执行
		日志输出统一处理	
		<bean class="cn.itcast.ssm.interceptor.LogInterception"></bean>
		<mvc:interceptor>
			/**包括所有url及其url的子路径
			<mvc:mapping path="/**"/>
			<bean class="cn.itcast.ssm.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>		
	</mvc:interceptors> -->
	
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<!--
        2.启用Spring IOC容器Shiro注解，但必须配置了lifecycleBeanPostProcessor后才可以使用
    -->
	<bean id="defaultAdvisorAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	
	<!--3.开启shiro aop shiro注解支持,使用代理方式;所以需要开启代码支持; -->
	<bean id="authorizationAttributeSourceAdvisor" class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor" >
		<property name="securityManager" ref="securityManager" />
	</bean>
</beans>